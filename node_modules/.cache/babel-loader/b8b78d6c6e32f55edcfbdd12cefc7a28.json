{"ast":null,"code":"/**\r\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\r\n * embed the css on the page. This breaks all relative urls because now they are relative to a\r\n * bundle instead of the current page.\r\n *\r\n * One solution is to only use full urls, but that may be impossible.\r\n *\r\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\r\n *\r\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\r\n *\r\n */\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  } // blank or null?\n\n\n  if (!css || typeof css !== \"string\") {\n    return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\"); // convert each url(...)\n\n  /*\r\n  This regular expression is just a way to recursively match brackets within\r\n  a string.\r\n  \n   /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\r\n     (  = Start a capturing group\r\n       (?:  = Start a non-capturing group\r\n           [^)(]  = Match anything that isn't a parentheses\r\n           |  = OR\r\n           \\(  = Match a start parentheses\r\n               (?:  = Start another non-capturing groups\r\n                   [^)(]+  = Match anything that isn't a parentheses\r\n                   |  = OR\r\n                   \\(  = Match a start parentheses\r\n                       [^)(]*  = Match anything that isn't a parentheses\r\n                   \\)  = Match a end parentheses\r\n               )  = End Group\r\n               *\\) = Match anything and then a close parens\r\n           )  = Close non-capturing group\r\n           *  = Match anything\r\n        )  = Close capturing group\r\n   \\)  = Match a close parens\r\n  \n   /gi  = Get all matches, not the first.  Be case insensitive.\r\n   */\n\n  var fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n    // strip quotes (if they exist)\n    var unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\n      return $1;\n    }).replace(/^'(.*)'$/, function (o, $1) {\n      return $1;\n    }); // already a full url? no change\n\n    if (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n      return fullMatch;\n    } // convert the url to a full url\n\n\n    var newUrl;\n\n    if (unquotedOrigUrl.indexOf(\"//\") === 0) {\n      //TODO: should we add protocol?\n      newUrl = unquotedOrigUrl;\n    } else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n      // path should be relative to the base url\n      newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n    } else {\n      // path should be relative to current directory\n      newUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n    } // send back the fixed url(...)\n\n\n    return \"url(\" + JSON.stringify(newUrl) + \")\";\n  }); // send back the fixed css\n\n  return fixedCss;\n};","map":null,"metadata":{},"sourceType":"script"}