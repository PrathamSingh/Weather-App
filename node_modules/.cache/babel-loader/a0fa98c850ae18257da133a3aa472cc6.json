{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\r\n * Copyright 2014 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\nvar util = require('./util');\n/**\r\n * Determine whether mappingB is after mappingA with respect to generated\r\n * position.\r\n */\n\n\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n/**\r\n * A data structure to provide a sorted view of accumulated mappings in a\r\n * performance conscious manner. It trades a neglibable overhead in general\r\n * case for a large speedup in case of mappings being added in order.\r\n */\n\n\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true; // Serves as infimum\n\n  this._last = {\n    generatedLine: -1,\n    generatedColumn: 0\n  };\n}\n/**\r\n * Iterate through internal items. This method takes the same arguments that\r\n * `Array.prototype.forEach` takes.\r\n *\r\n * NOTE: The order of the mappings is NOT guaranteed.\r\n */\n\n\nMappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {\n  this._array.forEach(aCallback, aThisArg);\n};\n/**\r\n * Add the given source mapping.\r\n *\r\n * @param Object aMapping\r\n */\n\n\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n\n    this._array.push(aMapping);\n  }\n};\n/**\r\n * Returns the flat, sorted array of mappings. The mappings are sorted by\r\n * generated position.\r\n *\r\n * WARNING: This method returns internal data without copying, for\r\n * performance. The return value must NOT be mutated, and should be treated as\r\n * an immutable borrow. If you want to take ownership, you must make your own\r\n * copy.\r\n */\n\n\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n\n    this._sorted = true;\n  }\n\n  return this._array;\n};\n\nexports.MappingList = MappingList;","map":null,"metadata":{},"sourceType":"script"}