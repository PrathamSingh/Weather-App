{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeOptions;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction normalizeOptions(config) {\n  const _config$options = config.options,\n        filename = _config$options.filename,\n        cwd = _config$options.cwd,\n        _config$options$filen = _config$options.filenameRelative,\n        filenameRelative = _config$options$filen === void 0 ? typeof filename === \"string\" ? _path().default.relative(cwd, filename) : \"unknown\" : _config$options$filen,\n        _config$options$sourc = _config$options.sourceType,\n        sourceType = _config$options$sourc === void 0 ? \"module\" : _config$options$sourc,\n        inputSourceMap = _config$options.inputSourceMap,\n        _config$options$sourc2 = _config$options.sourceMaps,\n        sourceMaps = _config$options$sourc2 === void 0 ? !!inputSourceMap : _config$options$sourc2,\n        moduleRoot = _config$options.moduleRoot,\n        _config$options$sourc3 = _config$options.sourceRoot,\n        sourceRoot = _config$options$sourc3 === void 0 ? moduleRoot : _config$options$sourc3,\n        _config$options$sourc4 = _config$options.sourceFileName,\n        sourceFileName = _config$options$sourc4 === void 0 ? _path().default.basename(filenameRelative) : _config$options$sourc4,\n        _config$options$comme = _config$options.comments,\n        comments = _config$options$comme === void 0 ? true : _config$options$comme,\n        _config$options$compa = _config$options.compact,\n        compact = _config$options$compa === void 0 ? \"auto\" : _config$options$compa;\n  const opts = config.options;\n  const options = Object.assign({}, opts, {\n    parserOpts: Object.assign({\n      sourceType: _path().default.extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n      sourceFileName: filename,\n      plugins: []\n    }, opts.parserOpts),\n    generatorOpts: Object.assign({\n      filename,\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact,\n      minified: opts.minified,\n      sourceMaps,\n      sourceRoot,\n      sourceFileName\n    }, opts.generatorOpts)\n  });\n\n  for (const plugins of config.passes) {\n    for (const plugin of plugins) {\n      if (plugin.manipulateOptions) {\n        plugin.manipulateOptions(options, options.parserOpts);\n      }\n    }\n  }\n\n  return options;\n}","map":null,"metadata":{},"sourceType":"script"}