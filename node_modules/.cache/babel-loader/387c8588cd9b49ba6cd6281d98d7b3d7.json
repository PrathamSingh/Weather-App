{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\Java Script\\\\Node js\\\\Node Projects\\\\Weather-App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runAsync = runAsync;\nexports.runSync = runSync;\n\nfunction _traverse() {\n  const data = _interopRequireDefault(require(\"@babel/traverse\"));\n\n  _traverse = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _pluginPass = _interopRequireDefault(require(\"./plugin-pass\"));\n\nvar _blockHoistPlugin = _interopRequireDefault(require(\"./block-hoist-plugin\"));\n\nvar _normalizeOpts = _interopRequireDefault(require(\"./normalize-opts\"));\n\nvar _normalizeFile = _interopRequireDefault(require(\"./normalize-file\"));\n\nvar _generate = _interopRequireDefault(require(\"./file/generate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction runAsync(config, code, ast, callback) {\n  let result;\n\n  try {\n    result = runSync(config, code, ast);\n  } catch (err) {\n    return callback(err);\n  }\n\n  return callback(null, result);\n}\n\nfunction runSync(config, code, ast) {\n  const file = (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast);\n  transformFile(file, config.passes);\n  const opts = file.opts;\n\n  const _ref = opts.code !== false ? (0, _generate.default)(config.passes, file) : {},\n        outputCode = _ref.outputCode,\n        outputMap = _ref.outputMap;\n\n  return {\n    metadata: file.metadata,\n    options: opts,\n    ast: opts.ast === true ? file.ast : null,\n    code: outputCode === undefined ? null : outputCode,\n    map: outputMap === undefined ? null : outputMap,\n    sourceType: file.ast.program.sourceType\n  };\n}\n\nfunction transformFile(file, pluginPasses) {\n  for (const pluginPairs of pluginPasses) {\n    const passPairs = [];\n    const passes = [];\n    const visitors = [];\n\n    for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {\n      const pass = new _pluginPass.default(file, plugin.key, plugin.options);\n      passPairs.push([plugin, pass]);\n      passes.push(pass);\n      visitors.push(plugin.visitor);\n    }\n\n    for (const _ref2 of passPairs) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n\n      const plugin = _ref3[0];\n      const pass = _ref3[1];\n      const fn = plugin.pre;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        if (isThenable(result)) {\n          throw new Error(\"You appear to be using an plugin with an async .pre, \" + \"which your current version of Babel does not support.\" + \"If you're using a published plugin, you may need to upgrade \" + \"your @babel/core version.\");\n        }\n      }\n    }\n\n    const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);\n\n    (0, _traverse().default)(file.ast, visitor, file.scope);\n\n    for (const _ref4 of passPairs) {\n      var _ref5 = _slicedToArray(_ref4, 2);\n\n      const plugin = _ref5[0];\n      const pass = _ref5[1];\n      const fn = plugin.post;\n\n      if (fn) {\n        const result = fn.call(pass, file);\n\n        if (isThenable(result)) {\n          throw new Error(\"You appear to be using an plugin with an async .post, \" + \"which your current version of Babel does not support.\" + \"If you're using a published plugin, you may need to upgrade \" + \"your @babel/core version.\");\n        }\n      }\n    }\n  }\n}\n\nfunction isThenable(val) {\n  return !!val && (typeof val === \"object\" || typeof val === \"function\") && !!val.then && typeof val.then === \"function\";\n}","map":null,"metadata":{},"sourceType":"script"}