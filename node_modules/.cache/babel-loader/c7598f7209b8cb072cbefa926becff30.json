{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadPrivatePartialConfig;\nexports.loadPartialConfig = loadPartialConfig;\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = _interopRequireDefault(require(\"./plugin\"));\n\nvar _util = require(\"./util\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nvar _environment = require(\"./helpers/environment\");\n\nvar _options = require(\"./validation/options\");\n\nvar _files = require(\"./files\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resolveRootMode(rootDir, rootMode) {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\":\n      {\n        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        return upwardRootDir === null ? rootDir : upwardRootDir;\n      }\n\n    case \"upward\":\n      {\n        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        if (upwardRootDir !== null) return upwardRootDir;\n        throw Object.assign(new Error(\"Babel was run with rootMode:\\\"upward\\\" but a root could not \" + \"be found when searching upward from \\\"\".concat(rootDir, \"\\\"\")), {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir\n        });\n      }\n\n    default:\n      throw new Error(\"Assertion failure - unknown rootMode value\");\n  }\n}\n\nfunction loadPrivatePartialConfig(inputOpts) {\n  if (inputOpts != null && (typeof inputOpts !== \"object\" || Array.isArray(inputOpts))) {\n    throw new Error(\"Babel options must be an object, null, or undefined\");\n  }\n\n  const args = inputOpts ? (0, _options.validate)(\"arguments\", inputOpts) : {};\n  const _args$envName = args.envName,\n        envName = _args$envName === void 0 ? (0, _environment.getEnv)() : _args$envName,\n        _args$cwd = args.cwd,\n        cwd = _args$cwd === void 0 ? \".\" : _args$cwd,\n        _args$root = args.root,\n        rootDir = _args$root === void 0 ? \".\" : _args$root,\n        _args$rootMode = args.rootMode,\n        rootMode = _args$rootMode === void 0 ? \"root\" : _args$rootMode,\n        caller = args.caller;\n\n  const absoluteCwd = _path().default.resolve(cwd);\n\n  const absoluteRootDir = resolveRootMode(_path().default.resolve(absoluteCwd, rootDir), rootMode);\n  const context = {\n    filename: typeof args.filename === \"string\" ? _path().default.resolve(cwd, args.filename) : undefined,\n    cwd: absoluteCwd,\n    root: absoluteRootDir,\n    envName,\n    caller\n  };\n  const configChain = (0, _configChain.buildRootChain)(args, context);\n  if (!configChain) return null;\n  const options = {};\n  configChain.options.forEach(opts => {\n    (0, _util.mergeOptions)(options, opts);\n  });\n  options.babelrc = false;\n  options.configFile = false;\n  options.passPerPreset = false;\n  options.envName = context.envName;\n  options.cwd = context.cwd;\n  options.root = context.root;\n  options.filename = typeof context.filename === \"string\" ? context.filename : undefined;\n  options.plugins = configChain.plugins.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));\n  options.presets = configChain.presets.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));\n  return {\n    options,\n    context,\n    ignore: configChain.ignore,\n    babelrc: configChain.babelrc,\n    config: configChain.config\n  };\n}\n\nfunction loadPartialConfig(inputOpts) {\n  const result = loadPrivatePartialConfig(inputOpts);\n  if (!result) return null;\n  const options = result.options,\n        babelrc = result.babelrc,\n        ignore = result.ignore,\n        config = result.config;\n  (options.plugins || []).forEach(item => {\n    if (item.value instanceof _plugin.default) {\n      throw new Error(\"Passing cached plugin instances is not supported in \" + \"babel.loadPartialConfig()\");\n    }\n  });\n  return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined);\n}\n\nclass PartialConfig {\n  constructor(options, babelrc, ignore, config) {\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    Object.freeze(this);\n  }\n\n  hasFilesystemConfig() {\n    return this.babelrc !== undefined || this.config !== undefined;\n  }\n\n}\n\nObject.freeze(PartialConfig.prototype);","map":null,"metadata":{},"sourceType":"script"}